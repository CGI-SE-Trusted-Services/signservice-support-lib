group "se.signatureservice.support"

certserviceSettings {
    useGroovyInMain = false
    licenseName = "GNU Lesser General Public License v3.0 or later"
    licenseURL = "https://www.gnu.org/licenses/lgpl-3.0-standalone.html"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
    dssVersion = "5.7"
}

repositories {
    mavenCentral()
    maven {
        url "https://ec.europa.eu/cefdigital/artifact/content/repositories/esignaturedss/"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

dependencies {
    compile "eu.europa.ec.joinup.sd-dss:dss-xades:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-cades:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-pades:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-pades-pdfbox:${dssVersion}"
    compile "eu.europa.ec.joinup.sd-dss:dss-service:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-utils:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-utils-apache-commons:$dssVersion"
    compile "eu.europa.ec.joinup.sd-dss:dss-crl-parser-x509crl:$dssVersion"
    compile 'org.apache.pdfbox:pdfbox:2.0.26'
    compile "org.apache.santuario:xmlsec:2.1.7"
    compile 'org.slf4j:slf4j-api:1.7.36'
    compile 'org.slf4j:slf4j-simple:1.7.36'
    compile 'org.json:json:20220320'
    compile ("org.springframework:spring-context:5.3.19") {
        exclude module: "spring-beans"
    }
    compile ("org.certificateservices.messages:certservice-messages:2203.1"){
        // certservice-messages is using a newer version of xmlsec and bouncy castle
        // which is not compatible with the current version of DSS library.
        exclude module: "xmlsec"
        exclude group: "org.bouncycastle"
    }
    runtime "org.slf4j:slf4j-simple:1.7.36"
    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.certificateservices.se/artifactory/libs-release-local' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
}

task uploadGdc(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true

    repositories {
        mavenDeployer {
            repository(url: "https://nexus2.dk.cgi.com/repository/Inera-maven-releases.repository") {
                authentication(userName: getGdcRepoUsername(), password: getGdcRepoPassword())
            }
            pom.version = version
        }
    }
}

uploadGdc.dependsOn(build)

def getGdcRepoUsername(){
    def gdcRepoUsername = ext.has('repository.gdc.username') ? ext['repository.gdc.username'] : ""
    if(gdcRepoUsername == null || gdcRepoUsername.trim() == ""){
        println("Warning: no GDC Repository Credentials set in gradle.properties. Set values 'repository.gdc.username' and 'repository.gdc.password'.")
    }
    return gdcRepoUsername
}

def getGdcRepoPassword(){
    def gdcRepoPassword = ext.has('repository.gdc.password') ? ext['repository.gdc.password'] : ""
    if(gdcRepoPassword == null || gdcRepoPassword.trim() == ""){
        println("Warning: no GDC Repository Credentials set in gradle.properties. Set values 'repository.gdc.username' and 'repository.gdc.password'.")
    }
    return gdcRepoPassword
}